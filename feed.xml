<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ONION</title>
    <link href="https://znizn.github.io/myweb/feed.xml" rel="self" />
    <link href="https://znizn.github.io/myweb" />
    <updated>2021-07-05T16:27:33+08:00</updated>
    <author>
        <name>ZHUO</name>
    </author>
    <id>https://znizn.github.io/myweb</id>

    <entry>
        <title>Publii 配置 GitHub Pages 静态网站</title>
        <author>
            <name>ZHUO</name>
        </author>
        <link href="https://znizn.github.io/myweb/publii-pei-zhi-github-pages-jing-tai-wang-zhan.html"/>
        <id>https://znizn.github.io/myweb/publii-pei-zhi-github-pages-jing-tai-wang-zhan.html</id>
            <category term="静态网站"/>
            <category term="实用性-阐述规则"/>
            <category term="Publii"/>

        <updated>2021-07-05T10:42:29+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://znizn.github.io/myweb/media/posts/4/Snipaste_2021-07-03_16-48-30.png" alt="" />
                    设置 GitHub token 配置 Publii 之前需要先设置用于 Publii 使用的 GitHub token，添加 token 方式如下： 创建一个用于存放 GitHub Pages 的仓库，需要注意要添加一个 ReadMe markdown 文件，因为 Publii 的初始化需要仓库中至少有一个文件 创建 GitHub&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://znizn.github.io/myweb/media/posts/4/Snipaste_2021-07-03_16-48-30.png" alt="" />
                <h2 id="设置-github-token">设置 GitHub token</h2>
<p>配置 Publii 之前需要先设置用于 Publii 使用的 GitHub token，添加 token 方式如下：</p>
<p><figure class="post__image"><img loading="lazy" src="https://ftp.bmp.ovh/imgs/2021/07/4cc183aed648937a.gif" data-is-external-image="true"  alt="设置GitHub token" /></figure></p>
<h2 id="创建-github-仓库">创建 GitHub 仓库</h2>
<p>创建一个用于存放 GitHub Pages 的仓库，需要注意要添加一个 ReadMe markdown 文件，因为 Publii 的初始化需要仓库中至少有一个文件</p>
<p><figure class="post__image"><img loading="lazy" src="https://ftp.bmp.ovh/imgs/2021/07/08e69dcc036942a3.gif" data-is-external-image="true"  alt="创建 GitHub 仓库" /></figure></p>
<h2 id="publii-服务器设置">Publii 服务器设置</h2>
<p>创建 GitHub 仓库并创建 GitHub Pages，按照 GitHub Pages 的创建方式配置网站，其中 Token 选择上面创建的 Token</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20210702185202322.png" data-is-external-image="true"  alt="image-20210702185202322" /></figure></p>
<p>完成设置后点击保存，并测试与网络的连接。当测试成功后点击左侧 <code>Sync Your Website</code> 将文件配置到 GitHub 上。</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20210703163936267.png" data-is-external-image="true"  alt="image-20210703163936267" /></figure></p>
<h2 id="修改主题">修改主题</h2>
<ol>
<li><p>在 <a href="https://marketplace.getpublii.com/">主题网站</a> 选择喜欢的主题下载，其中的 Freebies 是免费的主题</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20210703164401748.png" data-is-external-image="true"  alt="image-20210703164401748" /></figure></p>
</li>
<li><p>将主题文件解压后复制到 Publii 的主题保存目录下（<code>C:\Users\USER NAME\Documents\Publii\themes</code>）</p>
</li>
<li><p>重启 Publii 后可以在【Site settings】中选择刚才复制的主题</p>
<p><figure class="post__image"><img loading="lazy" src="https://ftp.bmp.ovh/imgs/2021/07/042db264e6339775.gif" data-is-external-image="true"  alt="设置Publii主题" /></figure></p>
</li>
</ol>
<hr>
<blockquote>
<p><strong>参考资料</strong>：</p>
<ul>
<li><a href="https://getpublii.com/docs/host-static-website-github-pages.html">Publii 官方文档</a>；</li>
</ul>
</blockquote>

            ]]>
        </content>
    </entry>
    <entry>
        <title>TTRSS 阅读优化方案</title>
        <author>
            <name>ZHUO</name>
        </author>
        <link href="https://znizn.github.io/myweb/ttrss-yue-du-you-hua-fang-an.html"/>
        <id>https://znizn.github.io/myweb/ttrss-yue-du-you-hua-fang-an.html</id>
            <category term="实用性-阐述规则"/>
            <category term="Unread"/>
            <category term="RSS Tracker"/>
            <category term="Fever"/>

        <updated>2021-07-05T16:27:33+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://znizn.github.io/myweb/media/posts/9/Snipaste_2021-07-05_15-21-33.png" alt="" />
                    RSS Tracker 优化桌面端阅读体验 下载 RSS Tracker 下载地址：https://www.microsoft.com/store/apps/9N85PV1RJD6V RSS Tracker 提供试用版本，为期七天。 在部署好的 Tiny Tiny RSS 中开启 Fever API，先在插件目录下打开 Fever 插件 保存后可以在下方的 Fever Emulation 中设置&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://znizn.github.io/myweb/media/posts/9/Snipaste_2021-07-05_15-21-33.png" alt="" />
                <h2 id="rss-tracker-优化桌面端阅读体验">RSS Tracker 优化桌面端阅读体验</h2>
<h3 id="下载-rss-tracker">下载 RSS Tracker</h3>
<p>下载地址：<a href="https://www.microsoft.com/store/apps/9N85PV1RJD6V">https://www.microsoft.com/store/apps/9N85PV1RJD6V</a></p>
<p>RSS Tracker 提供试用版本，为期七天。</p>
<h3 id="配置-fever">配置 Fever</h3>
<p>在部署好的 Tiny Tiny RSS  中开启 Fever API，先在插件目录下打开 Fever 插件</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201204125533127.png" data-is-external-image="true"  alt="image-20201204125533127" /></figure></p>
<p>保存后可以在下方的 Fever Emulation 中设置 Fever API 的密码</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201204125637258.png" data-is-external-image="true"  alt="image-20201204125637258" /></figure></p>
<h3 id="启用-fever-api-与相关配置">启用 Fever API 与相关配置</h3>
<p>选择 Fever 的登录选项</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201204125842108.png" data-is-external-image="true"  alt="image-20201204125842108" /></figure></p>
<p>在登录界面中输入 Fever API 的地址，比如我的是 <code>http://www.zhuottrss.top/plugins/fever/</code>。账号名称为 <code>admin</code> ，密码为刚才在 Tiny Tiny RSS 中配置的密码</p>
<img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201204130050504.png" data-is-external-image="true"  alt="image-20201204130050504" style="zoom: 67%;" />



<p>登录结果如下图所示，点击【Confirmed &amp; Next】进入下一项配置</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201204130132136.png" data-is-external-image="true"  alt="image-20201204130132136" /></figure></p>
<p>设置软件的基础配置，点击【Confirmed &amp; Next】即可完成全部的配置</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201204130326267.png" data-is-external-image="true"  alt="image-20201204130326267" /></figure></p>
<p>结果展示如下：</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201204130436854.png" data-is-external-image="true"  alt="image-20201204130436854" /></figure></p>
<h2 id="unread-优化移动端阅读体验">Unread 优化移动端阅读体验</h2>
<h3 id="下载-unread">下载 Unread</h3>
<p>可以支持 Fever API 的有 Feeder 和 Unread，由于第一款软件无法在国服 APP store 下载到，因此选择 Unread 作为移动端阅读软件。</p>
<h3 id="启动-fever-api">启动 Fever API</h3>
<p>软件打开后如下图所示，其中的 Fever 是已经配置完成的结果。点击其中的【ADD AN ACCONT】</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201206174721558.png" data-is-external-image="true"  alt="image-20201206174721558" /></figure></p>
<p>呼出菜单中选择【FEVER】</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201206174806512.png" data-is-external-image="true"  alt="image-20201206174806512" /></figure></p>
<p>填入 TTRSS 的网址，然后点击【NEXT】后填入上面创建的账号和密码</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201206174859354.png" data-is-external-image="true"  alt="image-20201206174859354" /></figure></p>
<p>配置完成后结果如下：</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201206175014255.png" data-is-external-image="true"  alt="image-20201206175014255" /></figure></p>
<h2 id="总结">总结</h2>
<p>根据目前的使用体验来看，RSS Tracker 有如下优缺点</p>
<p>优点：</p>
<ul>
<li>优化阅读体验，更好的信息流展示方式和阅读方式</li>
<li>提供翻译服务</li>
<li>提供朗读服务</li>
<li>提供更方便的全文抓取服务，即自动全文抓取选定信息源的内容</li>
</ul>
<p>缺点：</p>
<ul>
<li>部分文章全文抓取速度相比 mercury 要慢</li>
<li>列表视图在笔记本上的体验稍差，无法自定义列表和原文的显示大小</li>
<li>订阅新源需要回到 Tiny Tiny RSS </li>
<li>没有【已收藏】的图标</li>
<li>当选择查看未读文章时，如果文章量比较大可能导致软件崩溃</li>
</ul>
<p>整体而言，RSS Tracker 提供了相当完整的 RSS 阅读服务，很大程度优化了桌面客户端的阅读体验。</p>
<hr>
<blockquote>
<p>参考资料：</p>
<ul>
<li><a href="https://www.richasy.cn/document/rss/use.html">软件使用说明 | 云乡 (richasy.cn)</a>；</li>
<li><a href="https://www.bilibili.com/video/BV1Lt4y1Q7Be">【UWP】有趣的RSS阅读器，RSS追踪全新版本上线_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>；</li>
<li><a href="https://segmentfault.com/a/1190000020180496">Tiny Tiny RSS + fever 搭建自己的 RSS 服务_前端博客 - SegmentFault 思否</a>；</li>
</ul>
</blockquote>

            ]]>
        </content>
    </entry>
    <entry>
        <title>使用 WordPress 搭建动态博客</title>
        <author>
            <name>ZHUO</name>
        </author>
        <link href="https://znizn.github.io/myweb/shi-yong-wordpress-da-jian-dong-tai-bo-ke.html"/>
        <id>https://znizn.github.io/myweb/shi-yong-wordpress-da-jian-dong-tai-bo-ke.html</id>
            <category term="实用性-阐述规则"/>
            <category term="动态博客"/>
            <category term="WordPress"/>

        <updated>2021-07-05T15:18:03+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://znizn.github.io/myweb/media/posts/8/2019-02-04_233346.jpg" alt="" />
                    云服务器自动搭建 以腾讯云服务器为例： 点击【重置应用】 点击【应用镜像】，选择【WordPress】，勾选上确定声明后点击【确定】 点击【应用管理】 点击【登录】 打开 credentials.txt ，并记住其中的密码 cat ~lighthouse/credentials.txt 登录管理员登录地址，然后输入刚才的账户名和密码 现在可以登录 WordPress 配置和撰写博客了 搭建过程参考 搭建LNMP mysql 执行以下命令，创建 MariaDB 数据库。例如 “wordpress”。 CREATE&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://znizn.github.io/myweb/media/posts/8/2019-02-04_233346.jpg" alt="" />
                <h2 id="云服务器自动搭建">云服务器自动搭建</h2>
<p>以腾讯云服务器为例：</p>
<ol>
<li><p>点击【重置应用】</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201129163957156.png" data-is-external-image="true"  alt="image-20201129163957156" /></figure></p>
</li>
<li><p>点击【应用镜像】，选择【WordPress】，勾选上确定声明后点击【确定】</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201129164049051.png" data-is-external-image="true"  alt="image-20201129164049051" /></figure></p>
</li>
<li><p>点击【应用管理】</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201129182926625.png" data-is-external-image="true"  alt="image-20201129182926625" /></figure></p>
</li>
<li><p>点击【登录】</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201129182942189.png" data-is-external-image="true"  alt="image-20201129182942189" /></figure></p>
</li>
<li><p>打开 <code>credentials.txt</code> ，并记住其中的密码</p>
</li>
</ol>
<pre><code class="language-bash">cat ~lighthouse/credentials.txt
</code></pre>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201129183216979.png" data-is-external-image="true"  alt="image-20201129183216979" /></figure></p>
<ol start="6">
<li><p>登录管理员登录地址，然后输入刚才的账户名和密码</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201129183303001.png" data-is-external-image="true"  alt="image-20201129183303001" /></figure></p>
</li>
<li><p>现在可以登录 WordPress 配置和撰写博客了</p>
</li>
</ol>
<h2 id="手动搭建">手动搭建</h2>
<h4 id="搭建lnmp环境">搭建LNMP环境</h4>
<p>搭建过程参考 <a href="">搭建LNMP</a> </p>
<h4 id="配置数据库">配置数据库</h4>
<ol>
<li>执行以下命令，进入 MariaDB。</li>
</ol>
<pre><code class="language-bash">mysql
</code></pre>
<ol start="2">
<li>执行以下命令，创建 MariaDB 数据库。例如 “wordpress”。</li>
</ol>
<pre><code class="language-bash">CREATE DATABASE wordpress;
</code></pre>
<ol start="3">
<li>执行以下命令，创建一个新用户。例如 “user”，登录密码为 <code>123456</code>。</li>
</ol>
<pre><code class="language-bash">CREATE USER &#39;user&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;
</code></pre>
<ol start="4">
<li>执行以下命令，赋予用户对 “wordpress” 数据库的全部权限。</li>
</ol>
<pre><code class="language-bash">GRANT ALL PRIVILEGES ON wordpress.* TO &#39;user&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;
</code></pre>
<ol start="5">
<li><p>执行以下命令，设置 root 帐户密码。</p>
<blockquote>
<p>说明：MariaDB 10.4 在 CentOS 系统上已增加了 root 帐户免密登录功能，请执行以下步骤设置您的 root 帐户密码并牢记。</p>
</blockquote>
</li>
</ol>
<pre><code class="language-bash">ALTER USER root@localhost IDENTIFIED VIA mysql_native_password USING PASSWORD(&#39;输入您的密码&#39;);
</code></pre>
<ol start="6">
<li>执行以下命令，使所有配置生效。</li>
</ol>
<pre><code class="language-bash">FLUSH PRIVILEGES;
</code></pre>
<ol start="7">
<li>执行以下命令，退出 MariaDB。</li>
</ol>
<pre><code class="language-bash">\q
</code></pre>
<h4 id="安装和配置wordpress">安装和配置WordPress</h4>
<h6 id="下载-wordpress">下载 WordPress</h6>
<blockquote>
<p>说明：WordPress 可从 WordPress 官方网站下载 WordPress 最新中文版本并安装，本教程采用 WordPress 中文版本。</p>
</blockquote>
<ol>
<li>执行以下命令，删除网站根目录下用于测试 PHP-Nginx 配置的 <code>index.php</code> 文件。</li>
</ol>
<pre><code class="language-bash">rm -rf /usr/share/nginx/html/index.php
</code></pre>
<ol start="2">
<li>依次执行以下命令，进入 <code>/usr/share/nginx/html/</code> 目录，并下载与解压 WordPress。</li>
</ol>
<pre><code class="language-bash">cd /usr/share/nginx/html

wget https://cn.wordpress.org/wordpress-5.0.4-zh_CN.tar.gz

tar zxvf wordpress-5.0.4-zh_CN.tar.gz
</code></pre>
<h6 id="修改-wordpress-配置文件">修改 WordPress 配置文件</h6>
<ol>
<li>依次执行以下命令，进入 WordPress 安装目录，将 <code>wp-config-sample.php</code> 文件复制到 <code>wp-config.php</code> 文件中，并将原先的示例配置文件保留作为备份。</li>
</ol>
<pre><code class="language-bash">cd /usr/share/nginx/html/wordpress

cp wp-config-sample.php wp-config.php
</code></pre>
<ol start="2">
<li>执行以下命令，打开并编辑新创建的配置文件。</li>
</ol>
<pre><code class="language-bash">vim wp-config.php
</code></pre>
<ol start="3">
<li>按 <kbd>i</kbd> 切换至编辑模式，找到文件中 MySQL 的部分，并将相关配置信息修改为 <a href="https://cloud.tencent.com/document/product/213/8044#database">配置 WordPress 数据库</a> 中的内容。</li>
</ol>
<pre><code class="language-bash">// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define(&#39;DB_NAME&#39;, &#39;wordpress&#39;);
   
/** MySQL database username */
define(&#39;DB_USER&#39;, &#39;user&#39;);
   
/** MySQL database password */
define(&#39;DB_PASSWORD&#39;, &#39;123456&#39;);
   
/** MySQL hostname */
define(&#39;DB_HOST&#39;, &#39;localhost&#39;);
</code></pre>
<ol start="4">
<li>修改完成后，按 <kbd>Esc</kbd>，输入 <code>:wq</code>，保存文件返回。</li>
</ol>
<h4 id="验证wordpress安装">验证WordPress安装</h4>
<ol>
<li>在浏览器地址栏输入 <code>http://域名或云服务器实例的公网 IP/wordpress 文件夹</code>，例如：</li>
</ol>
<pre><code class="language-bash">http://192.xxx.xxx.xx/wordpress
</code></pre>
<p>   转至 WordPress 安装页，开始配置 WordPress。</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201129173538851.png" data-is-external-image="true"  alt="image-20201129173538851" /></figure></p>
<ol start="2">
<li><p>根据 WordPress 安装向导提示输入以下安装信息，单击【安装 WordPress】，完成安装。</p>
<table>
<thead>
<tr>
<th align="left">所需信息</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">站点标题</td>
<td align="left">WordPress 网站名称。</td>
</tr>
<tr>
<td align="left">用户名</td>
<td align="left">WordPress 管理员名称。出于安全考虑，建议设置一个不同于 admin 的名称。因为与默认用户名称 admin 相比，该名称更难破解。</td>
</tr>
<tr>
<td align="left">密码</td>
<td align="left">可以使用默认强密码或者自定义密码。请勿重复使用现有密码，并确保将密码保存在安全的位置。</td>
</tr>
<tr>
<td align="left">您的电子邮件</td>
<td align="left">用于接收通知的电子邮件地址。</td>
</tr>
</tbody></table>
<p>现在可以用登录 WordPress 博客，并开始发布博客文章了。</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201129173727307.png" data-is-external-image="true"  alt="image-20201129173727307" /></figure></p>
</li>
</ol>
<h2 id="用-docker-搭建">用 docker 搭建</h2>
<h4 id="搭建-lnmp-环境">搭建 LNMP 环境</h4>
<p>搭建方式同上</p>
<h4 id="安装-docker-和-docker-compose">安装 <code>docker</code> 和 <code>docker-compose</code></h4>
<h6 id="安装-docker">安装 <code>Docker</code></h6>
<ol>
<li>一键安装 <code>Docker</code> </li>
</ol>
<pre><code class="language-bash">curl -fsSL https://get.docker.com/ | sh
</code></pre>
<blockquote>
<p>实测该命令在<code>CentOS 8</code>上无法使用，需要手动安装</p>
</blockquote>
<ol start="2">
<li>启动 <code>Docker</code> 服务</li>
</ol>
<pre><code class="language-bash">sudo systemctl start docker
</code></pre>
<ol start="3">
<li>检查一下 <code>Docker</code> 是否启动成功</li>
</ol>
<pre><code class="language-bash">sudo systemctl status dockersudo systemctl status docker
</code></pre>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026211822324.png" data-is-external-image="true"  alt="image-20201026211822324" /></figure></p>
<h6 id="安装-docker-compose">安装 <code>docker-compose</code></h6>
<p><strong>使用 GitHub 的方式安装</strong></p>
<p>从github上下载docker-compose二进制文件安装 下载最新版的docker-compose文件</p>
<pre><code class="language-bash">curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
</code></pre>
<p>添加可执行权限</p>
<pre><code class="language-bash">chmod +x /usr/local/bin/docker-compose
</code></pre>
<p>测试安装结果</p>
<pre><code class="language-bash">docker-compose --version
docker-compose version 1.16.1, build 1719ceb
</code></pre>
<p><strong>使用 <code>pip</code> 安装</strong></p>
<p>安装 <code>pip</code> </p>
<pre><code class="language-bash">yum -y install epel-release
yum -y install python-pip
</code></pre>
<p>安装 <code>docker-compose</code> </p>
<pre><code class="language-bash">pip install docker-compose
</code></pre>
<h4 id="配置-yml-文件">配置 <code>.yml</code> 文件</h4>
<p>文件配置代码如下所示：</p>
<pre><code class="language-yaml">version: &#39;3.3&#39;

services:
   db:
     image: mysql:5.7
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - &quot;8000:80&quot;
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
       WORDPRESS_DB_NAME: wordpress
volumes:
    db_data: {}
</code></pre>
<h4 id="安装wordpress">安装WordPress</h4>
<p>新建一个文件夹，将配置好的 <code>docker-compose.yml</code> 文件复制进文件夹，在该文件夹下输入</p>
<pre><code class="language-bash">docker-compose up -d 
</code></pre>
<p>等待安装完成即可，安装完成后可以查看容器运行状态</p>
<pre><code class="language-bash">docker ps
</code></pre>
<p>容器运行情况如下</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201129114704520.png" data-is-external-image="true"  alt="image-20201129114704520" /></figure></p>
<p>然后可以在相应端口打开 WordPress 开始配置和撰写博客</p>
<hr>
<blockquote>
<p>参考资料：</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV12E41127Uj">个人博客|网站部署终极操作:一行命令搞定!_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>；</li>
<li><a href="https://cloud.tencent.com/document/product/213/8044">云服务器 手动搭建 WordPress 个人站点（Linux） - 最佳实践 - 文档中心 - 腾讯云 (tencent.com)</a>；</li>
<li><a href="https://cloud.tencent.com/document/product/1207/45117">轻量应用服务器 使用应用镜像搭建 WordPress 站点 - 最佳实践 - 文档中心 - 腾讯云 (tencent.com)</a>；</li>
</ul>
</blockquote>

            ]]>
        </content>
    </entry>
    <entry>
        <title>使用 Hexo 搭建个人静态博客</title>
        <author>
            <name>ZHUO</name>
        </author>
        <link href="https://znizn.github.io/myweb/shi-yong-hexo-da-jian-ge-ren-jing-tai-bo-ke.html"/>
        <id>https://znizn.github.io/myweb/shi-yong-hexo-da-jian-ge-ren-jing-tai-bo-ke.html</id>
            <category term="静态网站"/>
            <category term="实用性-阐述规则"/>
            <category term="Hexo"/>

        <updated>2021-07-05T10:34:23+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://znizn.github.io/myweb/media/posts/5/v2-41e1b825c51055f39c22b95777bc620b_1200x500.jpg" alt="" />
                    安装 Hexo 安装 Hexo 的前提是： 关于 Node.js 和 Git 的安装过程可以参考 使用 npm 安装 Hexo ： $ npm install -g hexo-cli 创建 GitHub 仓库&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://znizn.github.io/myweb/media/posts/5/v2-41e1b825c51055f39c22b95777bc620b_1200x500.jpg" alt="" />
                <h2 id="安装-hexo">安装 <code>Hexo</code></h2>
<p>安装 <code>Hexo</code> 的前提是：</p>
<ul>
<li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)；</li>
<li><a href="http://git-scm.com/">Git</a>；</li>
</ul>
<blockquote>
<p>关于 <code>Node.js</code> 和 <code>Git</code> 的安装过程可以参考</p>
<ul>
<li><a href="https://hexo.io/zh-cn/docs/%5B%5B%E5%AE%89%E8%A3%85-Node-js%5D%5D">安装-Node-js</a>；</li>
<li><a href="https://hexo.io/zh-cn/docs/%5B%5B%E5%AE%89%E8%A3%85-Git%5D%5D">安装-Git</a>；</li>
</ul>
</blockquote>
<p>使用 <code>npm</code> 安装 <code>Hexo</code> ：</p>
<pre><code class="language-bash">$ npm install -g hexo-cli
</code></pre>
<h2 id="创建-github-仓库">创建 GitHub 仓库</h2>
<p>点击 GitHub 主页右上角的【新建仓库】</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201201225441722.png" data-is-external-image="true"  alt="image-20201201225441722" /></figure></p>
<p>设置好仓库名称、描述后即可点击【生成仓库】</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201201225910392.png" data-is-external-image="true"  alt="image-20201201225910392" /></figure></p>
<p>在仓库设置中将 GitHub Pages 的目录由 <code>None</code> 设置为 <code>main</code> ，然后点击左侧的保存，上方就会生成 GitHub Pages 网址</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201201225353750.png" data-is-external-image="true"  alt="image-20201201225353750" /></figure></p>
<h2 id="建站">建站</h2>
<h3 id="初始化网站">初始化网站</h3>
<p>按照下列代码可以初始化文件夹</p>
<pre><code class="language-bash">$ hexo init [folder]
</code></pre>
<p>如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>
<h3 id="新建文章">新建文章</h3>
<pre><code class="language-bash">$ hexo new [layout] &lt;title&gt;
</code></pre>
<p>默认情况下，<code>Hexo</code> 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。</p>
<blockquote>
<p>如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。</p>
<p>如果标题包含空格的话，请使用引号括起来。如：</p>
<pre><code class="language-bash">$ hexo new &quot;post title with whitespace&quot;
</code></pre>
</blockquote>
<blockquote>
<p>命令说明：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--path</code></td>
<td align="left">自定义新文章的路径</td>
</tr>
<tr>
<td align="left"><code>-r</code>, <code>--replace</code></td>
<td align="left">如果存在同名文章，将其替换</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--slug</code></td>
<td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td>
</tr>
</tbody></table>
<p>可以使用 <code>--path</code> 参数来自行决定文章文件的目录位置</p>
<pre><code class="language-bash">hexo new page --path about/me &quot;About me&quot;
</code></pre>
<p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code>。</p>
<p>==注意！title 是必须指定的！==，当然也可以自己配置 Font-Matter ，配置方式参考 <a href="https://hexo.bootcss.com/docs/front-matter.html">Front-matter | Hexo 中文文档</a> 。</p>
</blockquote>
<h3 id="生成静态文件">生成静态文件</h3>
<p>静态文件的生成代码如下：</p>
<pre><code class="language-bash">$ hexo generate

# 也可以简写为如下命令
$ hexo g
</code></pre>
<blockquote>
<p>命令说明：</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-d</code>, <code>--deploy</code></td>
<td align="left">文件生成后立即部署网站</td>
</tr>
<tr>
<td align="left"><code>-w</code>, <code>--watch</code></td>
<td align="left">监视文件变动</td>
</tr>
<tr>
<td align="left"><code>-b</code>, <code>--bail</code></td>
<td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td>
</tr>
<tr>
<td align="left"><code>-f</code>, <code>--force</code></td>
<td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>
</tr>
<tr>
<td align="left"><code>-c</code>, <code>--concurrency</code></td>
<td align="left">最大同时生成文件的数量，默认无限制</td>
</tr>
</tbody></table>
</blockquote>
<h3 id="发表草稿">发表草稿</h3>
<p>发表草稿的代码如下：</p>
<pre><code class="language-bash">$ hexo publish [layout] &lt;filename&gt;
</code></pre>
<h3 id="启动服务器">启动服务器</h3>
<p>启动服务器的代码如下：</p>
<pre><code class="language-bash">$ hexo server

# 也可以简写为以下命令
$ hexo s
</code></pre>
<p>默认的访问网址为：<a href="http://localhost:4000/">http://localhost:4000/</a></p>
<blockquote>
<p>命令说明：</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--port</code></td>
<td align="left">重设端口</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--static</code></td>
<td align="left">只使用静态文件</td>
</tr>
<tr>
<td align="left"><code>-l</code>, <code>--log</code></td>
<td align="left">启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody></table>
</blockquote>
<h3 id="一键部署网站">一键部署网站</h3>
<p>部署方式如下：</p>
<pre><code class="language-bash">$ hexo deploy

# 也可以简写为以下命令
$ hexo d
</code></pre>
<p>在开始之前，您必须先在 <code>_config.yml</code> 中修改参数，一个正确的部署配置中至少要有 <code>type</code> 参数，例如：</p>
<pre><code class="language-yaml">deploy:
  type: git
</code></pre>
<p>您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。</p>
<pre><code class="language-yaml">deploy:
- type: git
  repo:
- type: heroku
  repo:
</code></pre>
<blockquote>
<p>其他有关渲染、清楚缓存文件、列出网站资料、显示版本等命令参考：<a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a>；</p>
</blockquote>
<p><strong>部署到 GitHub 的详细步骤说明</strong>：</p>
<ol>
<li>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</li>
</ol>
<pre><code class="language-bash">$ npm install hexo-deployer-git --save
</code></pre>
<ol start="2">
<li>修改配置。</li>
</ol>
<pre><code class="language-yaml">deploy:
  type: git
  repo: &lt;repository url&gt; [[https]]://bitbucket.org/JohnSmith/johnsmith.bitbucket.io
  branch: [branch]
  message: [message]
</code></pre>
<blockquote>
<p>部署到 GitHub 时，分支（branch）建议使用 <code>main</code> ，因为这是仓库的默认目录。否则需要将 GitHub 仓库的默认目录更改为配置设置的对应目录。</p>
<p>不填写时 Hexo 会自动在仓库中创建一个目录。</p>
</blockquote>
<blockquote>
<p>命令说明：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>repo</code></td>
<td align="left">库（Repository）地址</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>branch</code></td>
<td align="left">分支名称</td>
<td align="left"><code>gh-pages</code> (GitHub) <code>coding-pages</code> (Coding.net) <code>master</code> (others)</td>
</tr>
<tr>
<td align="left"><code>message</code></td>
<td align="left">自定义提交信息</td>
<td align="left"><code>Site updated: {{ now(&#39;YYYY-MM-DD HH:mm:ss&#39;) }}</code>)</td>
</tr>
<tr>
<td align="left"><code>token</code></td>
<td align="left">Optional token value to authenticate with the repo. Prefix with <code>$</code> to read token from environment variable</td>
<td align="left"></td>
</tr>
</tbody></table>
</blockquote>
<ol start="3">
<li>生成站点文件并推送至远程库。执行</li>
</ol>
<pre><code class="language-bash">hexo clean &amp;&amp; hexo deploy
</code></pre>
<ol start="4">
<li>登入 Github，在库设置（Repository Settings）中将默认分支设置为 <code>_config.yml</code> 配置中的分支名称。稍等片刻站点就会显示在 Github Pages 中。</li>
</ol>
<ul>
<li><p>这一切是如何发生的？</p>
<p>当执行 <code>hexo deploy</code> 时，Hexo 会将 <code>public</code> 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容。</p>
</li>
</ul>
<blockquote>
<p>文件说明：</p>
<p><code>_config.yml</code>：网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p>
<p><code>pakage.json</code>：应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p>
<p><code>scaffolds</code>：<a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p><code>source</code>：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p>
<p><code>themes</code>：<a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p>
</blockquote>
<h2 id="配置说明">配置说明</h2>
<p>主要的配置都可以在 <code>_config.yml</code> 中修改</p>
<h3 id="网站">网站</h3>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>title</code></td>
<td align="left">网站标题</td>
</tr>
<tr>
<td align="left"><code>subtitle</code></td>
<td align="left">网站副标题</td>
</tr>
<tr>
<td align="left"><code>description</code></td>
<td align="left">网站描述</td>
</tr>
<tr>
<td align="left"><code>keywords</code></td>
<td align="left">网站的关键词。支援多个关键词。</td>
</tr>
<tr>
<td align="left"><code>author</code></td>
<td align="left">您的名字</td>
</tr>
<tr>
<td align="left"><code>language</code></td>
<td align="left">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td>
</tr>
<tr>
<td align="left"><code>timezone</code></td>
<td align="left">网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td>
</tr>
</tbody></table>
<p>其中，<code>description</code> 主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code> 参数用于主题显示文章的作者。</p>
<h3 id="网址">网址</h3>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>url</code></td>
<td align="left">网址, must starts with <code>http://</code> or <code>https://</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>root</code></td>
<td align="left">网站根目录</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>permalink</code></td>
<td align="left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td>
<td align="left"><code>:year/:month/:day/:title/</code></td>
</tr>
<tr>
<td align="left"><code>permalink_defaults</code></td>
<td align="left">永久链接中各部分的默认值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>pretty_urls</code></td>
<td align="left">改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>pretty_urls.trailing_index</code></td>
<td align="left">是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td>
<td align="left"><code>true</code></td>
</tr>
<tr>
<td align="left"><code>pretty_urls.trailing_html</code></td>
<td align="left">是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td>
<td align="left"><code>true</code></td>
</tr>
</tbody></table>
<blockquote>
<p>如果您的网站存放在子目录中，例如 <code>http://example.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://example.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p>
</blockquote>
<h3 id="目录">目录</h3>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>source_dir</code></td>
<td align="left">资源文件夹，这个文件夹用来存放内容。</td>
<td align="left"><code>source</code></td>
</tr>
<tr>
<td align="left"><code>public_dir</code></td>
<td align="left">公共文件夹，这个文件夹用于存放生成的站点文件。</td>
<td align="left"><code>public</code></td>
</tr>
<tr>
<td align="left"><code>tag_dir</code></td>
<td align="left">标签文件夹</td>
<td align="left"><code>tags</code></td>
</tr>
<tr>
<td align="left"><code>archive_dir</code></td>
<td align="left">归档文件夹</td>
<td align="left"><code>archives</code></td>
</tr>
<tr>
<td align="left"><code>category_dir</code></td>
<td align="left">分类文件夹</td>
<td align="left"><code>categories</code></td>
</tr>
<tr>
<td align="left"><code>code_dir</code></td>
<td align="left">Include code 文件夹，<code>source_dir</code> 下的子目录</td>
<td align="left"><code>downloads/code</code></td>
</tr>
<tr>
<td align="left"><code>i18n_dir</code></td>
<td align="left">国际化（i18n）文件夹</td>
<td align="left"><code>:lang</code></td>
</tr>
<tr>
<td align="left"><code>skip_render</code></td>
<td align="left">跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 <code>public</code> 目录中。您可使用 <a href="https://github.com/micromatch/micromatch#extended-globbing">glob 表达式</a>来匹配路径。</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>如果刚开始使用 <code>Hexo</code> 通常不用修改这一项</p>
<h3 id="文章">文章</h3>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>new_post_name</code></td>
<td align="left">新文章的文件名称</td>
<td align="left">:title.md</td>
</tr>
<tr>
<td align="left"><code>default_layout</code></td>
<td align="left">预设布局</td>
<td align="left">post</td>
</tr>
<tr>
<td align="left"><code>auto_spacing</code></td>
<td align="left">在中文和英文之间加入空格</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>titlecase</code></td>
<td align="left">把标题转换为 title case</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>external_link</code></td>
<td align="left">在新标签中打开链接</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left"><code>external_link.enable</code></td>
<td align="left">在新标签中打开链接</td>
<td align="left"><code>true</code></td>
</tr>
<tr>
<td align="left"><code>external_link.field</code></td>
<td align="left">对整个网站（<code>site</code>）生效或仅对文章（<code>post</code>）生效</td>
<td align="left"><code>site</code></td>
</tr>
<tr>
<td align="left"><code>external_link.exclude</code></td>
<td align="left">需要排除的域名。主域名和子域名如 <code>www</code> 需分别配置</td>
<td align="left"><code>[]</code></td>
</tr>
<tr>
<td align="left"><code>filename_case</code></td>
<td align="left">把文件名称转换为 (1) 小写或 (2) 大写</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left"><code>render_drafts</code></td>
<td align="left">显示草稿</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>post_asset_folder</code></td>
<td align="left">启动 <a href="https://hexo.io/zh-cn/docs/asset-folders">Asset 文件夹</a></td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>relative_link</code></td>
<td align="left">把链接改为与根目录的相对位址</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>future</code></td>
<td align="left">显示未来的文章</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left"><code>highlight</code></td>
<td align="left">代码块的设置, see <a href="https://hexo.io/docs/syntax-highlight#Highlight-js">Highlight.js</a> section for usage guide</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>prismjs</code></td>
<td align="left">代码块的设置, see <a href="https://hexo.io/docs/syntax-highlight#PrismJS">PrismJS</a> section for usage guide</td>
<td align="left"></td>
</tr>
</tbody></table>
<blockquote>
<p>相对地址：</p>
<p>默认情况下，Hexo 生成的超链接都是绝对地址。例如，如果您的网站域名为 <code>example.com</code>,您有一篇文章名为 <code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p>
</blockquote>
<h3 id="分类标签">分类/标签</h3>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>default_category</code></td>
<td align="left">默认分类</td>
<td align="left"><code>uncategorized</code></td>
</tr>
<tr>
<td align="left"><code>category_map</code></td>
<td align="left">分类别名</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>tag_map</code></td>
<td align="left">标签别名</td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="日期时间格式">日期/时间格式</h3>
<p>Hexo 使用 <a href="http://momentjs.com/">Moment.js</a> 来解析和显示时间。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>date_format</code></td>
<td align="left">日期格式</td>
<td align="left"><code>YYYY-MM-DD</code></td>
</tr>
<tr>
<td align="left"><code>time_format</code></td>
<td align="left">时间格式</td>
<td align="left"><code>HH:mm:ss</code></td>
</tr>
<tr>
<td align="left"><code>updated_option</code></td>
<td align="left">当 Front Matter 中没有指定 <a href="https://hexo.io/zh-cn/docs/variables#%E9%A1%B5%E9%9D%A2%E5%8F%98%E9%87%8F"><code>updated</code></a> 时 <code>updated</code> 的取值</td>
<td align="left"><code>mtime</code></td>
</tr>
</tbody></table>
<blockquote>
<p>update_option</p>
<p><code>updated_option</code> 控制了当 Front Matter 中没有指定 <code>updated</code> 时，<code>updated</code> 如何取值：</p>
<ul>
<li><code>mtime</code>: 使用文件的最后修改时间。这是从 Hexo 3.0.0 开始的默认行为。</li>
<li><code>date</code>: 使用 <code>date</code> 作为 <code>updated</code> 的值。可被用于 Git 工作流之中，因为使用 Git 管理站点时，文件的最后修改日期常常会发生改变</li>
<li><code>empty</code>: 直接删除 <code>updated</code>。使用这一选项可能会导致大部分主题和插件无法正常工作。</li>
</ul>
<p><code>use_date_for_updated</code> 选项已经被废弃，将会在下个重大版本发布时去除。请改为使用 <code>updated_option: &#39;date&#39;</code>。</p>
</blockquote>
<h3 id="分页">分页</h3>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>per_page</code></td>
<td align="left">每页显示的文章量 (0 = 关闭分页功能)</td>
<td align="left"><code>10</code></td>
</tr>
<tr>
<td align="left"><code>pagination_dir</code></td>
<td align="left">分页目录</td>
<td align="left"><code>page</code></td>
</tr>
</tbody></table>
<h3 id="扩展">扩展</h3>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>theme</code></td>
<td align="left">当前主题名称。值为<code>false</code>时禁用主题</td>
</tr>
<tr>
<td align="left"><code>theme_config</code></td>
<td align="left">主题的配置文件。在这里放置的配置会覆盖主题目录下的 <code>_config.yml</code> 中的配置</td>
</tr>
<tr>
<td align="left"><code>deploy</code></td>
<td align="left">部署部分的设置</td>
</tr>
<tr>
<td align="left"><code>meta_generator</code></td>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#%E5%B1%9E%E6%80%A7">Meta generator</a> 标签。 值为 <code>false</code> 时 Hexo 不会在头部插入该标签</td>
</tr>
</tbody></table>
<blockquote>
<p>更多扩展配置与配置相关信息参考 <a href="https://hexo.io/zh-cn/docs/configuration#%E6%89%A9%E5%B1%95">配置 | Hexo</a> ；</p>
</blockquote>
<h2 id="迁移">迁移</h2>
<p>关于 RSS 的迁移方法，首先安装 <code>hexo-migrator-rss</code> 插件，安装代码为：</p>
<pre><code class="language-bash">$ npm install hexo-migrator-rss --save
</code></pre>
<p>安装完成后从 RSS 迁移文章，迁移代码如下：</p>
<pre><code class="language-bash">$ hexo migrate rss &lt;source&gt;
</code></pre>
<blockquote>
<p><code>source</code> 可以是文件路径或网址。</p>
</blockquote>
<h2 id="主题">主题</h2>
<p>创建 Hexo 主题非常容易，只要在 <code>themes</code> 文件夹内，新增一个任意名称的文件夹，并修改 <code>_config.yml</code> 内的 <code>theme</code> 设定，即可切换主题。一个主题可能会有以下的结构：</p>
<pre><code class="language-bash">.
├── _config.yml
├── languages
├── layout
├── scripts
└── source
</code></pre>
<blockquote>
<p>文件说明：</p>
<p><code>_config.yml</code>：主题的配置文件。和 Hexo 配置文件不同，主题配置文件修改时会自动更新，无需重启 Hexo Server。</p>
<p><code>languages</code>：语言文件夹。请参见 <a href="https://hexo.io/zh-cn/docs/internationalization">国际化 (i18n)</a>。</p>
<p><code>layout</code>：</p>
<p>布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式，Hexo 内建 <a href="https://github.com/node-swig/swig-templates">Swig</a> 模板引擎，您可以另外安装插件来获得 <a href="https://github.com/hexojs/hexo-renderer-ejs">EJS</a>、<a href="https://github.com/hexojs/hexo-renderer-haml">Haml</a>、<a href="https://github.com/hexojs/hexo-renderer-jade">Jade</a> 或 <a href="https://github.com/maxknee/hexo-render-pug">Pug</a> 支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如：</p>
<pre><code class="language-bash">layout.ejs   - 使用 EJS
layout.swig  - 使用 Swig
</code></pre>
<p>可参考 <a href="https://hexo.io/zh-cn/docs/templates">模板</a> 以获得更多信息。</p>
<p><code>scripts</code>：脚本文件夹。在启动时，Hexo 会载入此文件夹内的 JavaScript 文件，请参见 <a href="https://hexo.io/zh-cn/docs/plugins">插件</a> 以获得更多信息。</p>
<p><code>source</code>：</p>
<p>资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为 <code>_</code>（下划线线）或隐藏的文件会被忽略。</p>
<p>如果文件可以被渲染的话，会经过解析然后储存到 <code>public</code> 文件夹，否则会直接拷贝到 <code>public</code> 文件夹。</p>
</blockquote>
<p>推荐几个好看的主题：</p>
<ol>
<li><a href="https://github.com/theme-next/hexo-theme-next">NexT主题</a>；</li>
<li><a href="https://github.com/YunYouJun/hexo-theme-yun">yun主题</a>；</li>
<li><a href="https://theme-cards.ichr.me/start/">cards主题</a>；</li>
</ol>
<h2 id="问题解决">问题解决</h2>
<ul>
<li><p>为什么部署到 GitHub pages 后无法访问？</p>
<ol>
<li><p>检查是否在 GitHub Pages 中将目录分支改为自己部署的分支；</p>
</li>
<li><p>检查是否将部署目录设置为默认目录——如果创建的目录不是默认目录 <code>main</code> ，需要重新将默认目录设置为 Hexo 部署的目录</p>
</li>
</ol>
</li>
<li><p>为什么部署后没有样式？</p>
<p>在 <code>_config.yml</code> 文件中将 <code>url</code> 和 <code>root</code> 修改为对应的位置，如下代码所示</p>
<pre><code class="language-yaml">url: https://znizn.github.io/onion.github.io/
root: .
</code></pre>
<p>然后重新生成和部署（ <code>hexo g -d</code> ），稍等片刻即刻显示样式。</p>
<blockquote>
<p>说明：其中，<code>.</code> 表示搜索和 <code>_config.yml</code> 同一级的文件，当然也可以手动写为对应目录名</p>
</blockquote>
</li>
<li><p>为什么重新部署后 GitHub Pages 的内容没有变化？</p>
<p>国内网络原因，稍等一会就好。</p>
</li>
</ul>
<hr>
<blockquote>
<p>参考资料</p>
<ul>
<li><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a>；</li>
<li><a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=8105111787074271067">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>；</li>
<li><a href="https://www.yunyoujun.cn/note/hexo-build-note/">Hexo 静态博客搭建笔记 | 云游君的小站 (yunyoujun.cn)</a>；</li>
<li><a href="https://www.yunyoujun.cn/share/how-to-build-your-site/">教你如何从零开始搭建一个属于自己的网站 | 云游君的小站 (yunyoujun.cn)</a>；</li>
<li><a href="https://blog.ichr.me/post/set-up-hexo-on-github-page/">Github Page + Hexo 免费搭建个人博客教程 | ChrAlpha’s Blog (ichr.me)</a>；</li>
<li><a href="https://yun.yunyoujun.cn/guide/#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">使用指南 | Hexo-Theme-Yun (yunyoujun.cn)</a>；</li>
<li><a href="https://theme-cards.ichr.me/start/">开始使用 | Theme Cards (ichr.me)</a>；</li>
<li><a href="https://blog.csdn.net/weixin_45106105/article/details/107199231?depth_1-"> hexo部署到gitee没有样式——完美解决 | guitar&amp;programmer的博客-CSDN博客</a>；</li>
</ul>
</blockquote>

            ]]>
        </content>
    </entry>
    <entry>
        <title>在阿里云服务器部署 TinyTinyRSS</title>
        <author>
            <name>ZHUO</name>
        </author>
        <link href="https://znizn.github.io/myweb/zai-a-li-yun-fu-wu-qi-bu-shu-tinytinyrss.html"/>
        <id>https://znizn.github.io/myweb/zai-a-li-yun-fu-wu-qi-bu-shu-tinytinyrss.html</id>

        <updated>2021-07-05T11:59:15+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://znizn.github.io/myweb/media/posts/6/Tiny-Tiny-RSS-1.png" alt="" />
                    准备资料 以部署轻量应用服务器为例，部署步骤如下： 购买云服务器——入口：阿里云轻量应用服务器购买页面 选择服务器类型 配置云服务器部署位置、性能、时间等 选择部署位置 选择服务器系统镜像——以 CentOS7.3 为例 选择服务器性能套餐和系统盘容量 选择购买时长和数量 点击购买后自动开始部署 部署完成——部署完成的服务器可在服务器列表中找到 新建连接 设置名称和主机IP 在用户身份验证中设置用户名和密码 连接到云服务器 接受主机密钥 连接成功结果 新建连接 设置名称、主机IP、用户名与密码后确认 连接到云服务器 连接成功结构&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://znizn.github.io/myweb/media/posts/6/Tiny-Tiny-RSS-1.png" alt="" />
                <p><strong>准备资料</strong> </p>
<ol>
<li>云服务器：<a href="https://swas.console.aliyun.com/?spm=5176.100251.products-recent.dswas.18244f15wiQdFn#/server/8f7dab4ddf6e435ea464204c5799150b/cn-hangzhou/dashboard">阿里云服务器</a>【本次使用】；<a href="https://my.vultr.com/">vultr服务器</a></li>
<li>SSH：<code>xft6</code> </li>
<li>控制台：<code>Xshell</code> </li>
<li>完成备案的域名</li>
</ol>
<h2 id="部署云服务器">部署云服务器</h2>
<h3 id="利用阿里云部署服务器">利用阿里云部署服务器</h3>
<p>以部署轻量应用服务器为例，部署步骤如下：</p>
<ol>
<li><p>购买云服务器——入口：<a href="https://www.aliyun.com/product/swas?spm=5176.10173289.101.1.1ac02e772tjMjm">阿里云轻量应用服务器购买页面</a> </p>
</li>
<li><p>选择服务器类型</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201120140558560.png" data-is-external-image="true"  alt="image-20201120140558560" /></figure></p>
</li>
<li><p>配置云服务器部署位置、性能、时间等</p>
<ol>
<li><p>选择部署位置</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201120140726238.png" data-is-external-image="true"  alt="image-20201120140726238" /></figure></p>
</li>
<li><p>选择服务器系统镜像——以 <code>CentOS7.3</code> 为例</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201120140810556.png" data-is-external-image="true"  alt="image-20201120140810556" /></figure></p>
</li>
<li><p>选择服务器性能套餐和系统盘容量</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201120140914917.png" data-is-external-image="true"  alt="image-20201120140914917" /></figure></p>
</li>
<li><p>选择购买时长和数量</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201120140933945.png" data-is-external-image="true"  alt="image-20201120140933945" /></figure></p>
</li>
</ol>
</li>
<li><p>点击购买后自动开始部署</p>
</li>
<li><p>部署完成——部署完成的服务器可在服务器列表中找到</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201120141204052.png" data-is-external-image="true"  alt="image-20201120141204052" /></figure></p>
</li>
</ol>
<h2 id="外部控制台与ssh-链接">外部控制台与SSH 链接</h2>
<h3 id="链接到-xshell">链接到 <code>Xshell</code></h3>
<ol>
<li><p>新建连接</p>
<img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026204448895.png" data-is-external-image="true"  alt="image-20201026204448895" style="zoom: 67%;" /></li>
<li><p>设置名称和主机IP</p>
<img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026204558268.png" data-is-external-image="true"  alt="image-20201026204558268" style="zoom: 50%;" /></li>
<li><p>在用户身份验证中设置用户名和密码</p>
<img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026204720713.png" data-is-external-image="true"  alt="image-20201026204720713" style="zoom: 50%;" /></li>
<li><p>连接到云服务器</p>
<img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026204815578.png" data-is-external-image="true"  alt="image-20201026204815578" style="zoom: 50%;" /></li>
<li><p>接受主机密钥</p>
<img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026204901296.png" data-is-external-image="true"  alt="image-20201026204901296" style="zoom:50%;" /></li>
<li><p>连接成功结果</p>
<img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026204951395.png" data-is-external-image="true"  alt="image-20201026204951395" style="zoom: 80%;" /></li>
</ol>
<h3 id="连接到-xft6">连接到 <code>xft6</code></h3>
<ol>
<li><p>新建连接</p>
<img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026205137903.png" data-is-external-image="true"  alt="image-20201026205137903" style="zoom: 67%;" /></li>
<li><p>设置名称、主机IP、用户名与密码后确认</p>
<img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201029111626728.png" data-is-external-image="true"  alt="image-20201029111626728" style="zoom:67%;" /></li>
<li><p>连接到云服务器</p>
<img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026205443118.png" data-is-external-image="true"  alt="image-20201026205443118" style="zoom: 50%;" /></li>
<li><p>连接成功结构</p>
<img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026205754075.png" data-is-external-image="true"  alt="image-20201026205754075" style="zoom:50%;" /></li>
</ol>
<h2 id="配置云服务环境">配置云服务环境</h2>
<h3 id="安装-yum">安装 <code>yum</code></h3>
<p>安装和更新代码：</p>
<pre><code class="language-bash">sudo yum install epel-release -y
sudo yum update -y
</code></pre>
<h3 id="安装-docker">安装 <code>Docker</code></h3>
<ol>
<li>一键安装 <code>Docker</code> </li>
</ol>
<pre><code class="language-bash">curl -fsSL https://get.docker.com/ | sh
</code></pre>
<blockquote>
<p>实测该命令在<code>CentOS 8</code>上无法使用，需要手动安装</p>
</blockquote>
<ol start="2">
<li>启动 <code>Docker</code> 服务</li>
</ol>
<pre><code class="language-bash">sudo systemctl start docker
</code></pre>
<ol start="3">
<li>检查一下 <code>Docker</code> 是否启动成功</li>
</ol>
<pre><code class="language-bash">sudo systemctl status dockersudo systemctl status docker
</code></pre>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026211822324.png" data-is-external-image="true"  alt="image-20201026211822324" /></figure></p>
<center>Docker服务状态</center>

<blockquote>
<p>参考资料：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">Get Docker Engine - Community for CentOS | Docker Documentation</a></p>
</blockquote>
<h3 id="安装-docker-compose">安装 <code>Docker-compose</code></h3>
<p>由于 Tiny Tiny RSS 依赖有 PostgreSQL 的数据库服务以及 <a href="https://github.com/HenryQW/mercury_fulltext">mercury_fulltext</a> 的全文抓取服务等等，这些服务我们都借助于 Docker 部署，因此利用 <code>Docker-compose</code> 就会大大降低我们的部署难度。</p>
<ol>
<li>安装 <code>Docker-compose</code></li>
</ol>
<pre><code class="language-bash">curl -L https://github.com/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
</code></pre>
<ol start="2">
<li>给予 <code>Docker-compose</code> 可执行权限</li>
</ol>
<pre><code class="language-bash">chmod +x /usr/local/bin/docker-compose
</code></pre>
<ol start="3">
<li>检查 <code>Docker-compose</code> 是否安装成功</li>
</ol>
<pre><code class="language-bash">docker-compose --version
</code></pre>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026212358558.png" data-is-external-image="true"  alt="image-20201026212358558" /></figure></p>
<center>安装成功结果</center>

<h2 id="安装-tiny-tiny-rss-及其周边服务">安装 Tiny Tiny RSS 及其周边服务</h2>
<h3 id="安装-tiny-tiny-rss与配置">安装 Tiny Tiny RSS与配置</h3>
<ol>
<li>下载由 Awesome-TTRSS 配置的 Tiny Tiny RSS 服务的 <code>docker-compose</code> 配置文件</li>
</ol>
<pre><code class="language-bash"># 创建 ttrss 目录并进入
mkdir ttrss &amp;&amp; cd ttrss

# 利用 curl 下载 ttrss 的 docker-compose 配置文件至服务器
curl -fLo docker-compose.yml https://github.com/HenryQW/Awesome-TTRSS/raw/master/docker-compose.yml
</code></pre>
<ol start="2">
<li><p>修改 <code>docker-compose.yml </code> 里面的内容</p>
<ol>
<li><p>进入文本编辑模式</p>
<ol>
<li><p>使用 <code>vi</code> 进入文本编辑模式</p>
<p><code>vi docker-compose.yml</code></p>
</li>
<li><p>点击 <kbd>i</kbd> 进入文字输入模式</p>
</li>
</ol>
</li>
<li><p>修改文档</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026213306921.png" data-is-external-image="true"  alt="image-20201026213306921" /></figure></p>
<blockquote>
<p>TT-RSS的默认端口是181</p>
</blockquote>
</li>
<li><p>保存退出</p>
<ol>
<li>点击 <kbd>Esc</kbd> 进入命令模式</li>
<li>使用 <code>:wq</code> 保存文件并退出</li>
</ol>
</li>
</ol>
<blockquote>
<ol>
<li>将 PostgreSQL 数据库的默认密码进行修改</li>
<li>将 Tiny Tiny RSS 服务的部署网址修改——注意，如果你的部署 URL 包含端口（比如默认部署端口为 181 端口），那么这里的 URL 也需要加上端口号，格式为 <code>{网址}:{端口}</code> </li>
</ol>
</blockquote>
</li>
<li><p>启动 Tiny Tiny RSS 服务</p>
<p><code>docker-compose up -d</code></p>
</li>
<li><p>查看脚本执行结果</p>
<p><code>docker ps</code></p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026213745532.png" data-is-external-image="true"  alt="image-20201026213745532" /></figure></p>
<blockquote>
<ul>
<li>Tiny Tiny RSS 本身，监听端口为 <code>0.0.0.0:181 -&gt; 80</code>，同时暴露给外网</li>
<li>PostgreSQL 数据库，仅供内部使用</li>
<li>Mercury 全文抓取服务，仅供内部使用</li>
<li>OpenCC 简体、繁体中文转换服务，仅供内部使用</li>
</ul>
</blockquote>
</li>
<li><p>发现问题则执行以下代码修改</p>
</li>
</ol>
<pre><code class="language-bash"># 关闭 Docker 容器们
docker-compose down

# 删除已停止的 Docker 容器
docker-compose rm

# ……
# 修改 docker-compose 配置文件
# ……

# 再次开启 Docker 服务
docker-compose up -d
</code></pre>
<h3 id="安装-nginx-作为-docker-容器的反向代理">安装 Nginx 作为 Docker 容器的反向代理</h3>
<ol>
<li><p>使用 <code>yum</code> 安装 Nginx</p>
<p><code>sudo yum install nginx</code></p>
</li>
<li><p>开启 Nginx 服务</p>
<p><code>sudo systemctl start nginx</code></p>
</li>
<li><p>检查 Nginx 是否启动成功</p>
<p><code>sudo systemctl status nginx</code></p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201026214923169.png" data-is-external-image="true"  alt="image-20201026214923169" /></figure></p>
<blockquote>
<p>如果事先安装了 <code>Apache</code> ，先用 <code>sudo systemctl stop httpd.service</code> 关闭 <code>Apache</code> 服务</p>
</blockquote>
</li>
</ol>
<h2 id="签署-ssl-证书，部署-https">签署 SSL 证书，部署 HTTPS</h2>
<ol>
<li>安装 <code>certbot</code> </li>
</ol>
<pre><code class="language-bash">sudo yum install certbot python2-certbot-nginx
</code></pre>
<ol start="2">
<li>运行 <code>certbot</code> 来签署 SSL 证书并自动配置 Nginx 服务</li>
</ol>
<pre><code class="language-bash">sudo certbot --nginx
</code></pre>
<ol start="3">
<li>在这里，certbot 会要求我们输入我们希望签署 SSL 证书的域名，我们选择为 Tiny Tiny RSS 分配的域名即可等待脚本执行完成后重启 Nginx 服务</li>
</ol>
<pre><code class="language-bash">sudo systemctl restart nginx
</code></pre>
<ol start="4">
<li>修改 Nginx 的配置文件，配置 Nginx 反向代理，将访问 <code>https://www.zhuottrss.top</code> 的请求指向我们刚刚部署好的 Tiny Tiny RSS 服务</li>
</ol>
<blockquote>
<p>Nginx 的配置文件位于 <code>/etc/nginx/nginx.conf</code> </p>
</blockquote>
<ol start="5">
<li>在 <code>http</code> 项下，<code>server</code> 项前定义 <code>upstream</code> 服务</li>
</ol>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201120143633163.png" data-is-external-image="true"  alt="image-20201120143633163" /></figure></p>
<pre><code class="language-config">upstream ttrssdev{
    server 127.0.0.1:181;
    keepalive 64;
}
</code></pre>
<ol start="6">
<li>在刚刚 <code>certbot</code> 为我们生成好的响应域名 <code>server</code> 项下，注释掉第一行定义 <code>root</code> 的内容</li>
</ol>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201120143952279.png" data-is-external-image="true"  alt="image-20201120143952279" /></figure></p>
<ol start="7">
<li>并将 <code>location /</code> 项修改为以下内容</li>
</ol>
<pre><code class="language-java">location / {
        proxy_redirect off;
        proxy_pass http://ttrssdev;

        proxy_set_header  Host                $http_host;
        proxy_set_header  X-Real-IP           $remote_addr;
        proxy_set_header  X-Forwarded-Ssl     on;
        proxy_set_header  X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto   $scheme;
        proxy_set_header  X-Frame-Options     SAMEORIGIN;

        client_max_body_size        100m;
        client_body_buffer_size     128k;

        proxy_buffer_size           4k;
        proxy_buffers               4 32k;
        proxy_busy_buffers_size     64k;
        proxy_temp_file_write_size  64k;
    }
</code></pre>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201120144047551.png" data-is-external-image="true"  alt="image-20201120144047551" /></figure></p>
<ol start="8">
<li>再次执行 <code>sudo systemctl restart nginx</code> 重启 Nginx 服务，就可以在网站访问Tiny Tiny RSS 了</li>
</ol>
<h2 id="部署结果">部署结果</h2>
<ol>
<li><p>登录Tiny Tiny RSS 的默认管理员账户密码</p>
<blockquote>
<p>Tiny Tiny RSS 的默认管理员账户密码</p>
<p>账号：admin</p>
<p>密码：password</p>
</blockquote>
</li>
<li><p>部署结果</p>
<p><figure class="post__image"><img loading="lazy" src="https://gitee.com/zhuo1121/pictures/raw/master/image-20201120145557348.png" data-is-external-image="true"  alt="image-20201120145557348" /></figure></p>
</li>
</ol>
<p>这种配置下的 Tiny Tiny RSS 包含了主题和各种常用插件，可以直接才偏好设置中选择开启而不需要额外配置。</p>
<hr>
<blockquote>
<p>参考资料：</p>
<ul>
<li><a href="https://blog.spencerwoo.com/2019/11/tiny-tiny-rss/">Tiny Tiny RSS | 最速部署私有 RSS 服务器</a>；</li>
<li><a href="https://sspai.com/post/41302">如何搭建属于自己的 RSS 服务，高效精准获取信息</a>；</li>
<li><a href="https://www.vultr.com/docs/how-to-install-tiny-tiny-rss-on-centos-7#Step_1__Update_CentOS_7_to_the_latest_stable_status_using_YUM">How to Install Tiny Tiny RSS on CentOS 7</a>；</li>
<li>一站式容器化解决方案：<a href="https://ttrss.henry.wang/zh/#%E5%85%B3%E4%BA%8E">Awesome TTRSS</a>；</li>
<li><a href="https://blog.spencerwoo.com/2020/03/ttrss-noteworthy/">部署中的普遍问题与注意事项</a>；</li>
</ul>
</blockquote>

            ]]>
        </content>
    </entry>
    <entry>
        <title>使用 Hugo 搭建个人静态博客</title>
        <author>
            <name>ZHUO</name>
        </author>
        <link href="https://znizn.github.io/myweb/shi-yong-hugo-da-jian-ge-ren-jing-tai-bo-ke.html"/>
        <id>https://znizn.github.io/myweb/shi-yong-hugo-da-jian-ge-ren-jing-tai-bo-ke.html</id>
            <category term="静态网站"/>
            <category term="实用性-阐述规则"/>
            <category term="Hugo"/>

        <updated>2021-07-05T15:14:22+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://znizn.github.io/myweb/media/posts/7/Snipaste_2021-07-05_15-13-38.png" alt="" />
                    目录说明 layout目录和themes目录都可以控制皮肤，区别在于：hugo会首先查找layout中是否有皮肤文件，因此不需要指令；对于theme中的文件需要额外的指令，相对更加方便导出传递 static目录存放：images, CSS, JavaScript，etc 生成站点 将站点生成到所需路径下 cd d:/hugo/sites hugo new site myblog 将路径设置到需要添加blog的位置 使用hugo new site命令生成blog 设置blog文件夹的名称 在public目录下生成网站的方式 hugo 它会将你的网站设置和内容生成到public目录下，为后面的部署做准备 在 主题列表&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://znizn.github.io/myweb/media/posts/7/Snipaste_2021-07-05_15-13-38.png" alt="" />
                <h2 id="目录说明">目录说明</h2>
<ol>
<li>layout目录和themes目录都可以控制皮肤，区别在于：hugo会首先查找layout中是否有皮肤文件，因此不需要指令；对于theme中的文件需要额外的指令，相对更加方便导出传递</li>
<li>static目录存放：images, CSS, JavaScript，etc</li>
</ol>
<h2 id="生成站点">生成站点</h2>
<p>将站点生成到所需路径下</p>
<pre><code class="language-bash">cd d:/hugo/sites
hugo new site myblog
</code></pre>
<ol>
<li>将路径设置到需要添加blog的位置</li>
<li>使用hugo new site命令生成blog</li>
<li>设置blog文件夹的名称</li>
</ol>
<p>在public目录下生成网站的方式</p>
<pre><code class="language-bash">hugo
</code></pre>
<p>它会将你的网站设置和内容生成到public目录下，为后面的部署做准备</p>
<h2 id="设置主题">设置主题</h2>
<h3 id="clone-主题到-themes-目录">clone 主题到 themes 目录</h3>
<ol>
<li><p>在 <a href="https://themes.gohugo.io/">主题列表</a> 中，找到自己喜欢的主题，将主题添加到themes目录下</p>
<pre><code class="language-bash">cd themes
git clone 主题网址
</code></pre>
<blockquote>
<ul>
<li>在 clone 的时候要将主题文件 clone 到 themes 目录下。也可以自己复制到对应目录。</li>
<li>这里的命令在主题的网页中有，可以直接复制。</li>
</ul>
</blockquote>
</li>
<li><p>对于一些提供 example site 的主题，可以将文件中的 example site 目录下的文件复制并覆盖掉源blog下的文件</p>
<h3 id="layout目录">layout目录</h3>
</li>
<li><p>layout 目录可以承载以 <code>.html</code> 为格式的模板</p>
</li>
<li><p>模板类型包括：single page、partials、list pages、homepage、taxonomy templates</p>
</li>
</ol>
<h2 id="运行hugo">运行hugo</h2>
<p>执行hugo命令进行调试</p>
<pre><code class="language-bash">hugo server --theme=主题名称 --buildDrafts
</code></pre>
<p>调试完成后可以在本地的 <a href="http://localhost:1313/">local host</a> 上打开</p>
<h2 id="动态监测">动态监测</h2>
<p>hugo 在运行网站后，能够动态的调整网站内容，只需要将修改的文件保存后，效果就会在网站上动态显示出来</p>
<p>关闭动态监测的方式：</p>
<pre><code class="language-bash">hugo server --watch=false

# 或者
hugo server --disableLiveReload
</code></pre>
<p>这个方法同样可以通过在 <code>config.toml</code> 或 <code>config.yml</code> 中加入以下任意语句达成</p>
<pre><code class="language-bash">disableLiveReload = true

# 或者
disableLiveReload ： true
</code></pre>
<h2 id="本地编写文章">本地编写文章</h2>
<p>在 post 目录下生成 markdown 文件</p>
<pre><code class="language-bash">hugo new post/blog.md
</code></pre>
<p>如果只需要创建在 content 下，可以直接生成而不必指明路径</p>
<pre><code class="language-bash">hugo new blog.md
</code></pre>
<h2 id="部署在github上">部署在GitHub上</h2>
<ol>
<li>在GitHub上创建一个仓库，并设置好命名和描述——比如将仓库命名为 blog</li>
<li>在仓库设置中打开 GitHub Pages 设置，并复制生成的 GitHub Pages 网址</li>
<li>在站点根目录执行 hugo 命令，生成最终页面<pre><code class="language-bash">hugo --theme=主题名称 --baseUrl=&quot;GitHub Pages 网址&quot;
</code></pre>
完成后，所有的静态页面都会生成public目录</li>
<li>将public目录下所有文件push到刚建立的repository的master分支下<pre><code class="language-bash">cd public
git init
git remote add origin https://github.com/用户名/仓库名.git
git add -A
git commit -m &quot;fist commit&quot;
git push -u origin master
</code></pre>
</li>
</ol>
<p>然后在对应的 GitHub Pages 可以打开我们的个人博客</p>
<hr>
<blockquote>
<p>参考资料：</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1q4411i7gL">哔哩哔哩：手把手教你从0开始搭建自己的个人博客</a>；</li>
<li><a href="https://v3u.cn/a_id_81">利用基于Go Lang的Hugo配合nginx来打造属于自己的纯静态博客系统 (v3u.cn)</a>；</li>
<li><a href="https://themes.gohugo.io/hugo-theme-introduction/">Hugo Theme Introduction | Hugo Themes (gohugo.io)</a>；</li>
<li><a href="https://www.gohugo.org/">Hugo中文文档 (gohugo.org)</a>；</li>
</ul>
</blockquote>

            ]]>
        </content>
    </entry>
</feed>
